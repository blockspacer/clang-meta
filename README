DESCRIPTION

A C++ compiler with added meta-programming features: 
1) static reflection (of Clang AST nodes), 
2) metaparsing, 
3) custom diagnostics, and
4) constexpr containers.



INSTALLATION (Mac/Unix):

1. Download CMake (to build) and, optionally, Python (to run Clang's test suite), if necessary.
2. Create a folder to house the source, build, and examples.  We'll call it clang-meta.
	mkdir clang-meta
2. Clone this repository into that folder:
	git clone https://github.com/drec357/clang-meta.git clang-meta
3. The clang-meta folder should now have our "llvm" and "examples" folders in it.
   In addition, make a "build" folder, and navigate to it:
	cd clang-meta
	mkdir build
	cd build
4. Run CMake on the llvm sources:
	cmake ../llvm
5. Do the initial build (may take a few hours):
	cmake --build .
6. Build the clang-wreflection target:
	cmake --build clang-wreflection
7. Navigate to build/include, make sure a client-reflection-impl.hpp file has been created.  Make note of the path to it.  Also, in build/bin, there should be a clang++ executable/shortcut.  Make note of the absolute path to that -- you will need it shortly to instruct your IDE to use it as your CXX compiler.
8. Open clang-meta/examples/client_reflection_impl.hpp file.  It is intended to be a helper shortcut to your root client_reflection_impl.hpp.  Right now it contains a relative path that is probably correct for now.  But it would be best to change that to the absolute path to your clang-meta/build/include/client_reflection_impl.hpp, in case you want to move things around later.
9. Open your IDE -- I highly recommend XCode for Mac users; its code completer works very well for our purposes, whereas e.g. CLion's does not.  You may need to try a few out.
10. Import our "examples" folder into a new project, or set up a new one from scratch; all you need is to #include each of the example files (0_reflection.hpp, 1_metaparsing.hpp etc.).
11. Change the compilers for this project: in XCode, this is done by opening the Build Settings for the project, clicking the "+" button, Add User-Defined Setting, and assigning "CXX" to a full path to your clang++ binary (e.g. ../clang-meta/build/bin/clang++), and "CC" to e.g. ../clang-meta/build/bin/clang.
	--In CMake-based IDEs like CLion, you must set the CMAKE_CXX_COMPILER and CMAKE_C_COMPILER settings; research how to do this.
12. Then...try building!  I recommend going through the examples/tutorials in order, there is a lot here to get familiar with.  As explained in 0_reflection.hpp, you may encounter an unexplained crash now and then -- just rebuild if you do.
